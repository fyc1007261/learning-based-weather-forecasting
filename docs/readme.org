#+TITLE: Learning Based Solar Forecasting
#+AUTHOR: Haoming Shen
#+DATE: 04/02/2018
#+STARTUP: indent
#+LATEX_HEADER: \input{./configs.tex}

** Overview
This project aims at improving intra-day Ground Horizontal Irradiance
(GHI) forecasting using machine learning based algorithms. Predicting
the amount solar energy in the next few hours/days is of great
importance to power system operations and control. Currently two
methods are implemented and documented below. If you have any
questions with respect to this project, please contact me through
email (my unique name is `hmshen` I am willing to help/answer any
questions related to these two parts).

NOTICE: If you need to use the code below (even part of it), I would
recommend you read it critically before using it.

*** Github repo for this project
[[https://github.com/hm-shen/learning-based-weather-forecasting][
Link to Github repo (click me!)]]

*** Dependencies

Tensorflow, Sklearn, Pandas, Numpy, Scipy, ....

I would recommend you use Anaconda Python.

*To clone this repository into your server/local machine, copy the URL
of this page and execute the following command

#+BEGIN_SRC bash
git clone https://github.com/hm-shen/learning-based-weather-forecasting
#+END_SRC

** SVM Based Solar Irradiance Forecasting
This part is based on paper:

[[http://ieeexplore.ieee.org/document/7475892/][Hourly Solar Irradiance Prediction Based on Support Vector Machine and
Its Error Analysis (click me!)]]

*** Getting Started
Three modes are implemented: =weather_prediction=,
=houldout_trainint=, =grid_search=. =weather_prediction= will load the
input data and complete solar irradiance prediction;
=holdout_training= will split the input data into holdout training and
run test on the trained model; =grid_search= will search for good
parameters in a set of given parameters.

To run this project, you can directly =python main.py= after manually
setting the running mode parameters in =main.py= file.

*** Implementation
Given a set of training data, K-means algorithm is used to separate
data into three cluster where each of them implies a specific weather
type (cloudy, partly cloudy, sunny). Then, code will train a Support
Vector Regression model for each type of weather.

** LSTM Based Cloud Fraction Forecasting
Since both hourly GHI and hourly cloud fraction can be considered as
time series, solving it using Long short-term memory (LSTM) becomes
natural. This part implements a simple LSTM model for supervised cloud
cover and GHI forecasting.

*** Getting Started
To perform cloud fraction prediction on NREL data sets, please run the
following command from folder =lstm/src/=:

#+BEGIN_SRC python
python -p /path/to/NREL_data/ \
       -f 'average or variance' \
       -o /path/to/output/ \
       -c /path/to/configuration file/ \
       -n 'name of the dataset' \
#+END_SRC

Two example bash scripts are included in =lstm/src= folder. You can
execute them by running (NREL data for cloud fraction forecasting or
WRF data for solar irradiance forecasting)

#+BEGIN_SRC bash
./run_nrel_cloud.sh
#+END_SRC

or

#+BEGIN_SRC bash
./run_wrf_solar.sh
#+END_SRC

*** Implementation
Note that this implementation is based on
[[https://github.com/tgjeon/TensorFlow-Tutorials-for-Time-Series]] (click
me!)

**** Overall Framework of LSTM
[[http://colah.github.io/posts/2015-08-Understanding-LSTMs/][Tutorial on LSTM model can be found here]] (click me!)

All diagram of the architecture is shown below

#+BEGIN_SRC ditaa :file LSTM-Structure.png :cmdline -s 6 -S -E
+-----------------------------+
|      Linear Regression      |
+-----------------------------+
               ^
               |
+--------------+--------------+
|      Fully connect ANN      |
+-----------------------------+
               ^
               |
+--------------+--------------+
|      Fully connect ANN      |
+-----------------------------+
   ^         ^             ^
   |         |             |
+--+--+   +--+--+       +--+--+
| RNN |-->| RNN | .. -->| RNN |
+-----+   +-----+       +-----+
#+END_SRC

#+RESULTS:
[[file:LSTM-Structure.png]]

where the LSTM cell is represented as "unrolled" RNN cells. So for
each input \(x_t\), \(y_t\) will be generated by LSTM cell and feed
into two layers of fully connected artificial neural networks
(ANN). Then the output is used as the input to a linear regressor.

**** Parameters

Parameters for LSTM are listed below:
#+CAPTION: Parameters for setting up LSTM
#+ATTR_LATEX: :booktabs t
| Parameters   | Description                                            |
|--------------+--------------------------------------------------------|
| time steps   | how many time steps is used to predict (i.e. features) |
| rnn layers   | configuration of rnn layers using a list of dict       |
| dense layers | number of units in each dense layer                    |
|--------------+--------------------------------------------------------|

*** Some details on data preprocessing
Those NREL data contained in the =lstm/data/= folder is a little bit
messy in the sense that there may be invalid cloud fraction data in
each day (e.g. =nan=, =-1=). Thus, to remove days with too many messy
data, there are two variables, =ubd_min=, =lbd_max=, responsible for
removing all invalid days (days with too many bad data): all days
where the first valid data appearing later than =ubd_min= is removed;
similarly, all days where the last valid data appearing before
=lbd_max= is removed. This way, we select days with number of valid
data at least (=lbd_max= - =ubd_min=). Also note that these two
variables are related to the dataset you are using and thus should be
set by hand in the source code =/src/driver.py=.

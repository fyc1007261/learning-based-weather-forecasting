              ____________________________________________

               DOCUMENTATION ON SOLAR FORECASTING PROJECT

                              Haoming Shen
              ____________________________________________


                               04/02/2018


Table of Contents
_________________

1 Overview
.. 1.1 Github repo for this project
.. 1.2 Dependencies
2 SVM Based Solar Irradiance Forecasting
3 LSTM Based Cloud Fraction Forecasting
.. 3.1 Getting Started
.. 3.2 Implementation
..... 3.2.1 Overall Framework of LSTM
..... 3.2.2 Parameters


\clearpage


1 Overview
==========

  This project aims at improving intra-day Ground Horizontal Irradiance
  (GHI) forecasting using machine learning based algorithms. Predicting
  the amount solar energy in the next few hours/days is of great
  importance to power system operations and control. Currently two
  methods are implemented and documented below. If you have any
  questions with respect to this project, please contact me through
  email (my unique name is `hmshen`)

  NOTICE: If you need to use the code below (even part of it), I would
  recommend you read it critically before using it.


1.1 Github repo for this project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  [https://github.com/hm-shen/weather_forecast/tree/master/src]


1.2 Dependencies
~~~~~~~~~~~~~~~~

  Tensorflow, Sklearn, Pandas, Numpy, Scipy, ....

  I would recommend you use Anaconda Python.


2 SVM Based Solar Irradiance Forecasting
========================================


3 LSTM Based Cloud Fraction Forecasting
=======================================

  Since both hourly GHI and hourly cloud fraction can be considered as
  time series, solving it using Long short-term memory (LSTM) becomes
  natural. This part implements a simple LSTM model for supervised cloud
  cover and GHI forecasting.


3.1 Getting Started
~~~~~~~~~~~~~~~~~~~

  To perform cloud fraction prediction on NREL data sets, please run the
  following command from folder `cloud_forecasting/src/':

  ,----
  | python -p /path/to/NREL_data/ \
  |        -f 'average or variance' \
  |        -o /path/to/output/ \
  |        -c /path/to/configuration file/ \
  |        -n 'name of the dataset' \
  `----


3.2 Implementation
~~~~~~~~~~~~~~~~~~

  Note that this implementation of LSTM based time series is based on
  [https://github.com/tgjeon/TensorFlow-Tutorials-for-Time-Series]


3.2.1 Overall Framework of LSTM
-------------------------------

  [Tutorial on LSTM model can be found here (click me!)]

  All diagram of the architecture is shown below

  [file:LSTM-Structure.png]

  where the LSTM cell is represented as "unrolled" RNN cells. So for
  each input \(x_t\), \(y_t\) will be generated by LSTM cell and feed
  into two layers of fully connected artificial neural networks
  (ANN). Then the output is used as the input to a linear regressor.


  [Tutorial on LSTM model can be found here (click me!)]
  http://colah.github.io/posts/2015-08-Understanding-LSTMs/


3.2.2 Parameters
----------------

  Tunable parameters are listed below:
   Parametter    Description
  --------------------------------------------------------------------
   time steps    how many time steps is used to predict (features)
   rnn layers    the configuration of rnn layers using a list of dict
   dense layers  number of units in each dense layer
  --------------------------------------------------------------------
